{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "useEffect console.log": {
    "prefix": "ulg",
    "body": ["useEffect(() => console.log({ '$1': $1 }), [])"]
  },
  "Basic Jest test for React component": {
    "prefix": "rjt",
    "body": [
      "import React from \"react\";",
      "import { render, cleanup } from \"@testing-library/react\";",
      "",
      "import ${1:Component} from \"./$1\";",
      "",
      "describe(\"<$1 />\", () => {",
      "  afterEach(cleanup);",
      "",
      "  it(\"Should render without errors\", () => {",
      "    render(<$1 />);",
      "  });",
      "});"
    ]
  },
  "Basic Jest test for React component with props": {
    "prefix": "rjtp",
    "body": [
      "import React from \"react\";",
      "import { render, cleanup } from \"@testing-library/react\";",
      "",
      "import ${1:Component} from \"./$1\";",
      "",
      "/**",
      " * @return {Props}",
      " */",
      "const getMockedProps = () => ({",
      "  $2",
      "});",
      "",
      "/**",
      " * @type {Props}",
      " */",
      "let props;",
      "",
      "describe(\"<$1 />\", () => {",
      "  beforeEach(() => {",
      "    props = getMockedProps();",
      "  });",
      "",
      "  afterEach(cleanup);",
      "",
      "  it(\"Should render without errors\", () => {",
      "    render(<$1 {...props} />);",
      "  });",
      "});",
      "",
      "/** @typedef {import(\"prop-types\").InferProps<typeof $1.propTypes>} Props */"
    ]
  },

  "Init React FC": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:Component} = (${2:props}) => {",
      "  return ${3:<div>$1</div>};",
      "};",
      "",
      "export default $1;"
    ]
  },
  "Init React FC with PropTypes": {
    "prefix": "rfcpt",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "const propTypes = {",
      "  $2,",
      "};",
      "",
      "const ${1:Component} = ({ $2 }) => {",
      "  return ${3:<div>$1</div>};",
      "};",
      "",
      "$1.propTypes = propTypes;",
      "",
      "export default $1;"
    ]
  },
  "Init React FC with styled": {
    "prefix": "srfc",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import styled from 'styled-components';",
      "",
      "const propTypes = {",
      "  $3$2",
      "};",
      "",
      "const ${1:Component} = ({ $2 }) => {",
      "  return ${4:<Container>$1</Container>};",
      "};",
      "",
      "$1.propTypes = propTypes;",
      "",
      "const Container = styled.div``;",
      "",
      "export default $1;"
    ]
  },
  "Log variable": {
    "prefix": "lg",
    "body": "console.log({ $1 });"
  }
}
